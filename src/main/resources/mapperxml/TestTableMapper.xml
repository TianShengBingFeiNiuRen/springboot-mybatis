<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.andon.springbootmybatis.mapper.TestTableMapper">
    <resultMap id="BaseResultMap" type="com.andon.springbootmybatis.domain.TestTable">
        <!--@mbg.generated-->
        <!--@Table test_table-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="key" jdbcType="VARCHAR" property="key"/>
        <result column="value" jdbcType="VARCHAR" property="value"/>
        <!--        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>-->
        <!--        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>-->
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, `key`, `value`, update_time, create_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from test_table
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete
        from test_table
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.andon.springbootmybatis.domain.TestTable"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into test_table (`key`, `value`, update_time,
                                create_time)
        values (#{key,jdbcType=VARCHAR}, #{value,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
                #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.andon.springbootmybatis.domain.TestTable" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into test_table
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="key != null">
                `key`,
            </if>
            <if test="value != null">
                `value`,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="key != null">
                #{key,jdbcType=VARCHAR},
            </if>
            <if test="value != null">
                #{value,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.andon.springbootmybatis.domain.TestTable">
        <!--@mbg.generated-->
        update test_table
        <set>
            <if test="key != null">
                `key` = #{key,jdbcType=VARCHAR},
            </if>
            <if test="value != null">
                `value` = #{value,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.andon.springbootmybatis.domain.TestTable">
        <!--@mbg.generated-->
        update test_table
        set `key`       = #{key,jdbcType=VARCHAR},
            `value`     = #{value,jdbcType=VARCHAR},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <insert id="insertTestTableBatch">
        INSERT INTO `test_table` (`key`, `value`)
                VALUES
        <foreach collection="list" item="testTable" separator=",">
            (#{testTable.key,jdbcType=VARCHAR}, #{testTable.value,jdbcType=VARCHAR})
        </foreach>
    </insert>
    <select id="selectTestTable" resultMap="BaseResultMap">
        SELECT `id`, `key`, `value`, `update_time` AS `updateTime`, `create_time` AS `createTime`
        FROM `test_table`
        ORDER BY `update_time` DESC
        LIMIT #{row},#{size}
    </select>
    <select id="selectTestTableLikeKey" resultMap="BaseResultMap">
        SELECT `id`, `key`, `value`, `update_time` AS `updateTime`, `create_time` AS `createTime`
        FROM `test_table`
        WHERE `key` LIKE CONCAT('%', #{key,jdbcType=VARCHAR}, '%')
        ORDER BY `update_time` DESC
        LIMIT #{row},#{size}
    </select>
    <select id="selectTestTableSelective" resultMap="BaseResultMap">
        SELECT `id`, `key`, `value`, `update_time` AS `updateTime`, `create_time` AS `createTime`
        FROM `test_table`
        <where>
            <if test="idList != null and idList.size() != 0">
                `id` IN
                <foreach collection="idList" item="id" index="index" open="(" close=")" separator=",">
                    #{id,jdbcType=INTEGER}
                </foreach>
            </if>
            <if test="key != null and key != ''">
                AND `key` LIKE CONCAT('%', #{key,jdbcType=VARCHAR}, '%')
            </if>
        </where>
        ORDER BY `update_time` DESC
        LIMIT #{row},#{size}
    </select>
</mapper>